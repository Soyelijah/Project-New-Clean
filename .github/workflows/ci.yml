name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - release/**
  pull_request:
    branches:
      - main
      - release/**

permissions:
  contents: read
  packages: write
  security-events: write

env:
  NODE_VERSION: 20
  POSTGRES_DB: projectnewtest_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: ["backend", "admin-panel", "common-logging", "common-types"]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install root deps
        run: yarn install --frozen-lockfile

      - name: Lint ${{ matrix.workspace }}
        run: yarn workspace ${{ matrix.workspace }} run lint

      - name: Build ${{ matrix.workspace }}
        run: yarn workspace ${{ matrix.workspace }} run build

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U postgres -d projectnewtest_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Backend Unit & Integration Tests
        run: yarn workspace backend test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ env.POSTGRES_DB }}
          DB_USER: ${{ env.POSTGRES_USER }}
          DB_PASS: ${{ env.POSTGRES_PASSWORD }}

      - name: Frontend Lint
        run: yarn workspace admin-panel lint

  security:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Dependency review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/nodejs
          generateSarif: "1"

      - name: Upload Semgrep results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json

  docker:
    if: github.ref == 'refs/heads/main'
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/backend/Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/project-new-clean-backend:latest
            ghcr.io/${{ github.repository_owner }}/project-new-clean-backend:${{ github.sha }}

      - name: Build & push admin-panel image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/admin-panel/Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/project-new-clean-admin-panel:latest
            ghcr.io/${{ github.repository_owner }}/project-new-clean-admin-panel:${{ github.sha }}
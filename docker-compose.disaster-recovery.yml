# Enterprise Fortune 10 Global Military - Disaster Recovery Configuration
# Multi-region, multi-site business continuity architecture

version: '3.8'

x-logging: &enterprise-logging
  driver: "fluentd"
  options:
    fluentd-address: "enterprise-log-aggregator.internal:24224"
    tag: "enterprise.disaster-recovery.{{.Name}}"
    labels: "environment,service,region,availability_zone"

x-monitoring: &enterprise-monitoring
  labels:
    - "prometheus.io/scrape=true"
    - "prometheus.io/port=9090"
    - "enterprise.fortune10.com/monitoring=enabled"
    - "enterprise.fortune10.com/sla=critical"

x-security: &enterprise-security
  cap_drop:
    - ALL
  cap_add:
    - NET_BIND_SERVICE
  read_only: true
  tmpfs:
    - /tmp:rw,size=100M
    - /var/run:rw,size=50M
  security_opt:
    - no-new-privileges:true
    - seccomp:unconfined
  user: "10001:10001"

services:
  # Primary PostgreSQL with streaming replication
  postgres-primary:
    image: postgres:15-alpine
    hostname: postgres-primary.internal
    <<: [*enterprise-logging, *enterprise-monitoring, *enterprise-security]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-projectnewclean_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-enterprise_secure_password}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replication_secure_password}
      # Enterprise security hardening
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./security/certs/postgres.pem:/var/lib/postgresql/server.crt:ro
      - ./security/certs/postgres-key.pem:/var/lib/postgresql/server.key:ro
      - ./disaster-recovery/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./disaster-recovery/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Standby PostgreSQL for disaster recovery
  postgres-standby:
    image: postgres:15-alpine
    hostname: postgres-standby.internal
    <<: [*enterprise-logging, *enterprise-monitoring, *enterprise-security]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-projectnewclean_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-enterprise_secure_password}
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replication_secure_password}
      POSTGRES_MASTER_SERVICE: postgres-primary
    volumes:
      - postgres-standby-data:/var/lib/postgresql/data
      - ./security/certs/postgres.pem:/var/lib/postgresql/server.crt:ro
      - ./security/certs/postgres-key.pem:/var/lib/postgresql/server.key:ro
    ports:
      - "5433:5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cluster for session management and caching
  redis-primary:
    image: redis:7-alpine
    hostname: redis-primary.internal
    <<: [*enterprise-logging, *enterprise-monitoring, *enterprise-security]
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-enterprise_redis_password}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tls-port 6380
      --port 0
      --tls-cert-file /etc/redis/certs/redis.pem
      --tls-key-file /etc/redis/certs/redis-key.pem
      --tls-ca-cert-file /etc/redis/certs/ca-chain.pem
    volumes:
      - redis-primary-data:/data
      - ./security/certs/redis.pem:/etc/redis/certs/redis.pem:ro
      - ./security/certs/redis-key.pem:/etc/redis/certs/redis-key.pem:ro
      - ./security/certs/ca-chain.pem:/etc/redis/certs/ca-chain.pem:ro
    ports:
      - "6380:6380"
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/etc/redis/certs/redis.pem", "--key", "/etc/redis/certs/redis-key.pem", "--cacert", "/etc/redis/certs/ca-chain.pem", "-p", "6380", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HAProxy for load balancing and failover
  haproxy-enterprise:
    image: haproxy:2.8-alpine
    hostname: haproxy-enterprise.internal
    <<: [*enterprise-logging, *enterprise-monitoring]
    volumes:
      - ./disaster-recovery/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./security/certs/haproxy.pem:/etc/ssl/certs/haproxy.pem:ro
      - ./security/certs/haproxy-key.pem:/etc/ssl/private/haproxy-key.pem:ro
      - ./security/certs/ca-chain.pem:/etc/ssl/certs/ca-chain.pem:ro
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    depends_on:
      - postgres-primary
      - postgres-standby
      - redis-primary
    healthcheck:
      test: ["CMD", "wget", "--no-check-certificate", "-qO-", "https://localhost:443/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backup and recovery management
  backup-manager:
    image: postgres:15-alpine
    hostname: backup-manager.internal
    <<: [*enterprise-logging, *enterprise-monitoring, *enterprise-security]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-projectnewclean_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-enterprise_secure_password}
      BACKUP_SCHEDULE: "0 */6 * * *"  # Every 6 hours
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET:-enterprise-backups}
      S3_REGION: ${BACKUP_S3_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - backup-data:/var/lib/postgresql/backups
      - ./disaster-recovery/scripts/backup.sh:/usr/local/bin/backup.sh:ro
      - ./disaster-recovery/scripts/restore.sh:/usr/local/bin/restore.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
        chmod +x /usr/local/bin/backup.sh /usr/local/bin/restore.sh &&
        crond -f -d 8 -c /etc/crontabs
      "
    depends_on:
      postgres-primary:
        condition: service_healthy

  # Monitoring and alerting for disaster recovery
  prometheus-dr:
    image: prom/prometheus:latest
    hostname: prometheus-dr.internal
    <<: [*enterprise-logging, *enterprise-monitoring]
    volumes:
      - ./monitoring/prometheus/prometheus-dr.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules/disaster-recovery-rules.yml:/etc/prometheus/rules/disaster-recovery-rules.yml:ro
      - ./security/certs/prometheus.pem:/etc/prometheus/certs/prometheus.pem:ro
      - ./security/certs/prometheus-key.pem:/etc/prometheus/certs/prometheus-key.pem:ro
      - ./security/certs/ca-chain.pem:/etc/prometheus/certs/ca-chain.pem:ro
      - prometheus-dr-data:/prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Enterprise log aggregation
  fluentd-enterprise:
    image: fluent/fluentd:v1.16-debian-1
    hostname: fluentd-enterprise.internal
    <<: [*enterprise-monitoring]
    volumes:
      - ./disaster-recovery/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd-logs:/var/log/fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      FLUENTD_CONF: fluent.conf
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST:-elasticsearch.internal}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT:-9200}

  # Enterprise secrets management
  vault-enterprise:
    image: vault:1.15
    hostname: vault-enterprise.internal
    <<: [*enterprise-logging, *enterprise-monitoring, *enterprise-security]
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-enterprise_vault_token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_API_ADDR: https://vault-enterprise.internal:8200
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - ./security/certs/vault.pem:/vault/certs/vault.pem:ro
      - ./security/certs/vault-key.pem:/vault/certs/vault-key.pem:ro
      - ./disaster-recovery/vault/vault.hcl:/vault/config/vault.hcl:ro
    ports:
      - "8200:8200"
    command: >
      sh -c "
        vault server -config=/vault/config/vault.hcl
      "

volumes:
  postgres-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres-primary

  postgres-standby-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres-standby

  redis-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis-primary

  backup-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_DIR:-./backups}

  prometheus-dr-data:
    driver: local

  fluentd-logs:
    driver: local

  vault-data:
    driver: local

  vault-logs:
    driver: local

networks:
  default:
    name: enterprise-disaster-recovery
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: br-enterprise-dr
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    labels:
      - "enterprise.fortune10.com/network-type=disaster-recovery"
      - "enterprise.fortune10.com/security-zone=secure"